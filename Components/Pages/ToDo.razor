@page "/todo"
@rendermode InteractiveServer

<div class="container">
    <h1>To do</h1>
    <input @bind="newTodo">
    <button class="btn btn-primary" @onclick="OnClickAddTodo">Add todo</button>
    <ul style="list-style-type: none" class="mt-3 col-8">
        @foreach (var todo in todos)
        {
            <div class="border-bottom border-primary mt-1 pb-2">
                <li class="@GetTodoClass(todo)">@todo.Title</li>
                @if (!todo.Done)
                {
                    <button id="btn_done" class="btn btn-success" @onclick="(e) => OnClickDone(e, todo)"
                        disabled="@todo.Done">Done</button>
                }
                else
                {
                    <button class="btn btn-warning" @onclick="(e) => OnClickDone(e, todo)">Redo</button>
                    <p class="fst-italic">Your task was done @todo.DateTime.ToString("MMMM d, yyyy")</p>
                }
            </div>
        }
    </ul>
</div>




@code {

    List<TodoItem> todos = new List<TodoItem>();

    string newTodo = "";

    public class TodoItem
    {
        public string Title { get; set; }
        public bool Done { get; set; }
        public bool IsDisabled { get; set; }
        public DateTime DateTime{ get; set; }
    }

    public void OnClickAddTodo(MouseEventArgs e)
    {
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            todos.Add(new TodoItem { Title = newTodo });
            newTodo = "";
        }
    }


    public void OnClickDone(MouseEventArgs e, TodoItem todo)
    {
        todo.Done = !todo.Done;
        todo.DateTime = DateTime.Now;
    }

    public string GetTodoClass(TodoItem todo)
    {
        return todo.Done ? "text-break text-decoration-line-through" : "text-break";
    }

    public string GetTodoBtnClass(TodoItem todo)
    {
        return !todo.Done ? "btn btn-success" : "btn btn-secondary";
    }

}